//[INCLUDES]
#include <dogine/dogine.hpp>
#include <dogine/sounder.hpp>
#include <cstring>


//[PRIVATE VARS]
#define GAUSSIAN_SIZE 1025
const float gaussian [1025] = {
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0002, 0.0002, 0.0002, 
    0.0002, 0.0002, 0.0002, 0.0002, 
    0.0002, 0.0002, 0.0002, 0.0002, 
    0.0003, 0.0003, 0.0003, 0.0003, 
    0.0003, 0.0003, 0.0003, 0.0004, 
    0.0004, 0.0004, 0.0004, 0.0004, 
    0.0004, 0.0005, 0.0005, 0.0005, 
    0.0005, 0.0005, 0.0006, 0.0006, 
    0.0006, 0.0006, 0.0007, 0.0007, 
    0.0007, 0.0008, 0.0008, 0.0008, 
    0.0009, 0.0009, 0.0009, 0.0010, 
    0.0010, 0.0011, 0.0011, 0.0011, 
    0.0012, 0.0012, 0.0013, 0.0014, 
    0.0014, 0.0015, 0.0015, 0.0016, 
    0.0016, 0.0017, 0.0018, 0.0019, 
    0.0019, 0.0020, 0.0021, 0.0022, 
    0.0023, 0.0023, 0.0024, 0.0025, 
    0.0026, 0.0027, 0.0028, 0.0029, 
    0.0031, 0.0032, 0.0033, 0.0034, 
    0.0036, 0.0037, 0.0038, 0.0040, 
    0.0041, 0.0043, 0.0044, 0.0046, 
    0.0048, 0.0049, 0.0051, 0.0053, 
    0.0055, 0.0057, 0.0059, 0.0061, 
    0.0063, 0.0066, 0.0068, 0.0070, 
    0.0073, 0.0075, 0.0078, 0.0081, 
    0.0084, 0.0086, 0.0089, 0.0092, 
    0.0096, 0.0099, 0.0102, 0.0106, 
    0.0109, 0.0113, 0.0117, 0.0121, 
    0.0125, 0.0129, 0.0133, 0.0138, 
    0.0142, 0.0147, 0.0152, 0.0156, 
    0.0161, 0.0167, 0.0172, 0.0178, 
    0.0183, 0.0189, 0.0195, 0.0201, 
    0.0207, 0.0214, 0.0220, 0.0227, 
    0.0234, 0.0241, 0.0249, 0.0256, 
    0.0264, 0.0272, 0.0280, 0.0289, 
    0.0297, 0.0306, 0.0315, 0.0324, 
    0.0334, 0.0344, 0.0354, 0.0364, 
    0.0374, 0.0385, 0.0396, 0.0407, 
    0.0419, 0.0431, 0.0443, 0.0455, 
    0.0468, 0.0481, 0.0494, 0.0507, 
    0.0521, 0.0535, 0.0550, 0.0565, 
    0.0580, 0.0595, 0.0611, 0.0627, 
    0.0644, 0.0660, 0.0678, 0.0695, 
    0.0713, 0.0731, 0.0750, 0.0769, 
    0.0789, 0.0808, 0.0829, 0.0849, 
    0.0870, 0.0892, 0.0914, 0.0936, 
    0.0959, 0.0982, 0.1005, 0.1030, 
    0.1054, 0.1079, 0.1104, 0.1130, 
    0.1156, 0.1183, 0.1210, 0.1238, 
    0.1266, 0.1295, 0.1324, 0.1354, 
    0.1384, 0.1415, 0.1446, 0.1478, 
    0.1510, 0.1542, 0.1576, 0.1609, 
    0.1644, 0.1678, 0.1714, 0.1750, 
    0.1786, 0.1823, 0.1860, 0.1898, 
    0.1937, 0.1976, 0.2015, 0.2055, 
    0.2096, 0.2137, 0.2179, 0.2221, 
    0.2264, 0.2308, 0.2352, 0.2396, 
    0.2441, 0.2487, 0.2533, 0.2579, 
    0.2627, 0.2674, 0.2723, 0.2771, 
    0.2821, 0.2870, 0.2921, 0.2972, 
    0.3023, 0.3075, 0.3127, 0.3180, 
    0.3234, 0.3288, 0.3342, 0.3397, 
    0.3453, 0.3508, 0.3565, 0.3622, 
    0.3679, 0.3736, 0.3795, 0.3853, 
    0.3912, 0.3972, 0.4031, 0.4092, 
    0.4152, 0.4213, 0.4275, 0.4337, 
    0.4399, 0.4461, 0.4524, 0.4587, 
    0.4650, 0.4714, 0.4778, 0.4842, 
    0.4907, 0.4972, 0.5037, 0.5102, 
    0.5168, 0.5233, 0.5299, 0.5365, 
    0.5432, 0.5498, 0.5564, 0.5631, 
    0.5698, 0.5765, 0.5832, 0.5898, 
    0.5965, 0.6032, 0.6099, 0.6166, 
    0.6233, 0.6300, 0.6367, 0.6434, 
    0.6501, 0.6567, 0.6634, 0.6700, 
    0.6766, 0.6832, 0.6898, 0.6964, 
    0.7029, 0.7094, 0.7159, 0.7223, 
    0.7288, 0.7352, 0.7415, 0.7478, 
    0.7541, 0.7603, 0.7665, 0.7727, 
    0.7788, 0.7849, 0.7909, 0.7968, 
    0.8027, 0.8086, 0.8144, 0.8201, 
    0.8258, 0.8314, 0.8370, 0.8424, 
    0.8479, 0.8532, 0.8585, 0.8637, 
    0.8688, 0.8739, 0.8788, 0.8837, 
    0.8886, 0.8933, 0.8979, 0.9025, 
    0.9070, 0.9113, 0.9156, 0.9198, 
    0.9239, 0.9280, 0.9319, 0.9357, 
    0.9394, 0.9430, 0.9465, 0.9500, 
    0.9533, 0.9565, 0.9596, 0.9626, 
    0.9655, 0.9682, 0.9709, 0.9734, 
    0.9759, 0.9782, 0.9804, 0.9825, 
    0.9845, 0.9864, 0.9881, 0.9897, 
    0.9912, 0.9926, 0.9939, 0.9951, 
    0.9961, 0.9970, 0.9978, 0.9985, 
    0.9990, 0.9995, 0.9998, 0.9999, 
    1.0000, 0.9999, 0.9998, 0.9995, 
    0.9990, 0.9985, 0.9978, 0.9970, 
    0.9961, 0.9951, 0.9939, 0.9926, 
    0.9912, 0.9897, 0.9881, 0.9864, 
    0.9845, 0.9825, 0.9804, 0.9782, 
    0.9759, 0.9734, 0.9709, 0.9682, 
    0.9655, 0.9626, 0.9596, 0.9565, 
    0.9533, 0.9500, 0.9465, 0.9430, 
    0.9394, 0.9357, 0.9319, 0.9280, 
    0.9239, 0.9198, 0.9156, 0.9113, 
    0.9070, 0.9025, 0.8979, 0.8933, 
    0.8886, 0.8837, 0.8788, 0.8739, 
    0.8688, 0.8637, 0.8585, 0.8532, 
    0.8479, 0.8424, 0.8370, 0.8314, 
    0.8258, 0.8201, 0.8144, 0.8086, 
    0.8027, 0.7968, 0.7909, 0.7849, 
    0.7788, 0.7727, 0.7665, 0.7603, 
    0.7541, 0.7478, 0.7415, 0.7352, 
    0.7288, 0.7223, 0.7159, 0.7094, 
    0.7029, 0.6964, 0.6898, 0.6832, 
    0.6766, 0.6700, 0.6634, 0.6567, 
    0.6501, 0.6434, 0.6367, 0.6300, 
    0.6233, 0.6166, 0.6099, 0.6032, 
    0.5965, 0.5898, 0.5832, 0.5765, 
    0.5698, 0.5631, 0.5564, 0.5498, 
    0.5432, 0.5365, 0.5299, 0.5233, 
    0.5168, 0.5102, 0.5037, 0.4972, 
    0.4907, 0.4842, 0.4778, 0.4714, 
    0.4650, 0.4587, 0.4524, 0.4461, 
    0.4399, 0.4337, 0.4275, 0.4213, 
    0.4152, 0.4092, 0.4031, 0.3972, 
    0.3912, 0.3853, 0.3795, 0.3736, 
    0.3679, 0.3622, 0.3565, 0.3508, 
    0.3453, 0.3397, 0.3342, 0.3288, 
    0.3234, 0.3180, 0.3127, 0.3075, 
    0.3023, 0.2972, 0.2921, 0.2870, 
    0.2821, 0.2771, 0.2723, 0.2674, 
    0.2627, 0.2579, 0.2533, 0.2487, 
    0.2441, 0.2396, 0.2352, 0.2308, 
    0.2264, 0.2221, 0.2179, 0.2137, 
    0.2096, 0.2055, 0.2015, 0.1976, 
    0.1937, 0.1898, 0.1860, 0.1823, 
    0.1786, 0.1750, 0.1714, 0.1678, 
    0.1644, 0.1609, 0.1576, 0.1542, 
    0.1510, 0.1478, 0.1446, 0.1415, 
    0.1384, 0.1354, 0.1324, 0.1295, 
    0.1266, 0.1238, 0.1210, 0.1183, 
    0.1156, 0.1130, 0.1104, 0.1079, 
    0.1054, 0.1030, 0.1005, 0.0982, 
    0.0959, 0.0936, 0.0914, 0.0892, 
    0.0870, 0.0849, 0.0829, 0.0808, 
    0.0789, 0.0769, 0.0750, 0.0731, 
    0.0713, 0.0695, 0.0678, 0.0660, 
    0.0644, 0.0627, 0.0611, 0.0595, 
    0.0580, 0.0565, 0.0550, 0.0535, 
    0.0521, 0.0507, 0.0494, 0.0481, 
    0.0468, 0.0455, 0.0443, 0.0431, 
    0.0419, 0.0407, 0.0396, 0.0385, 
    0.0374, 0.0364, 0.0354, 0.0344, 
    0.0334, 0.0324, 0.0315, 0.0306, 
    0.0297, 0.0289, 0.0280, 0.0272, 
    0.0264, 0.0256, 0.0249, 0.0241, 
    0.0234, 0.0227, 0.0220, 0.0214, 
    0.0207, 0.0201, 0.0195, 0.0189, 
    0.0183, 0.0178, 0.0172, 0.0167, 
    0.0161, 0.0156, 0.0152, 0.0147, 
    0.0142, 0.0138, 0.0133, 0.0129, 
    0.0125, 0.0121, 0.0117, 0.0113, 
    0.0109, 0.0106, 0.0102, 0.0099, 
    0.0096, 0.0092, 0.0089, 0.0086, 
    0.0084, 0.0081, 0.0078, 0.0075, 
    0.0073, 0.0070, 0.0068, 0.0066, 
    0.0063, 0.0061, 0.0059, 0.0057, 
    0.0055, 0.0053, 0.0051, 0.0049, 
    0.0048, 0.0046, 0.0044, 0.0043, 
    0.0041, 0.0040, 0.0038, 0.0037, 
    0.0036, 0.0034, 0.0033, 0.0032, 
    0.0031, 0.0029, 0.0028, 0.0027, 
    0.0026, 0.0025, 0.0024, 0.0023, 
    0.0023, 0.0022, 0.0021, 0.0020, 
    0.0019, 0.0019, 0.0018, 0.0017, 
    0.0016, 0.0016, 0.0015, 0.0015, 
    0.0014, 0.0014, 0.0013, 0.0012, 
    0.0012, 0.0011, 0.0011, 0.0011, 
    0.0010, 0.0010, 0.0009, 0.0009, 
    0.0009, 0.0008, 0.0008, 0.0008, 
    0.0007, 0.0007, 0.0007, 0.0006, 
    0.0006, 0.0006, 0.0006, 0.0005, 
    0.0005, 0.0005, 0.0005, 0.0005, 
    0.0004, 0.0004, 0.0004, 0.0004, 
    0.0004, 0.0004, 0.0003, 0.0003, 
    0.0003, 0.0003, 0.0003, 0.0003, 
    0.0003, 0.0002, 0.0002, 0.0002, 
    0.0002, 0.0002, 0.0002, 0.0002, 
    0.0002, 0.0002, 0.0002, 0.0002, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0001, 
    0.0001, 0.0001, 0.0001, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000, 0.0000, 0.0000, 0.0000, 
    0.0000
};

//[PRIVATE FUNTIONS]
inline float GetGaussian(float x)
{
    // Mapear [-2, 2] â†’ [0, GAUSSIAN_SIZE-1]
    float t = (x + 2.0f) * 0.25f; 
    int idx = static_cast<int>(t * (GAUSSIAN_SIZE - 1) + 0.5f);

    // Clamp por seguridad
    if (idx < 0) idx = 0;
    else if (idx >= GAUSSIAN_SIZE) idx = GAUSSIAN_SIZE - 1;

    return gaussian[idx];
}

//[NAMESPACE]
namespace Dogine
{
    Audio::Audio(const char* _samples, size_t _size, 
            uint8_t _bitDepth, int _sampleRate, int _channels)
    {
        samples.resize(_size);
        std::memcpy(samples.data(), _samples, _size);

        bit_depth = _bitDepth;
        sample_rate = _sampleRate;
        channels = _channels;
        loop_start = 0;
        samples_count = (_size / (_bitDepth / 8)) / channels;
        //Log::Message("Audio created: %d Hz, %d bit, %d channels, %llu samples",
        //             sample_rate, bit_depth, channels, samples_count);
    }
    Audio::~Audio(){}

    //[GETTERS]
    //[GETTERS]
    uint8_t Audio::GetBitDepth() const { return bit_depth; }
    int Audio::GetSampleRate() const { return sample_rate; }
    int Audio::GetChannels() const { return channels; }
    uint64_t Audio::GetLengthSamples() const { return samples_count; }
    float Audio::GetDuration() const { return static_cast<float>(GetLengthSamples()) / sample_rate; }
    uint64_t Audio::GetLoopStart() const { return loop_start; }

    //[SETTERS]
    void Audio::SetLoopPoints(uint64_t _start)
    {
        loop_start = std::clamp(_start, (uint64_t)0, GetLengthSamples());
    }

    //[CORE]
    float Audio::GetSample(double _position, int _channel) const
    {
        int frame = static_cast<int>(_position);
        double frac = _position - frame; // parte fraccional [0..1)

        float acc = 0.0f;
        float weight_sum = 0.0f;

        for (int i = -2; i <= 2; ++i)
        {
            int f = frame + i;
            if (f < 0 || f >= samples_count)
                continue;

            int idx = (f * channels) + std::clamp(_channel, 0, channels - 1);
            idx *= (bit_depth / 8);

            float sample;
            if (bit_depth == 8)
                sample = static_cast<int8_t>(samples[idx]) / 128.0f;
            else if (bit_depth == 16)
                sample = *reinterpret_cast<const int16_t*>(samples.data() + idx) / 32768.0f;
            else
                sample = 0.0f;

            // Peso gaussiano segÃºn la distancia real
            float w = GetGaussian(static_cast<float>(i - frac));
            acc += sample * w;
            weight_sum += w;
        }

        return (weight_sum > 0.0f) ? acc / weight_sum : 0.0f;
    }


    // _position en "muestras flotantes", para interpolaciÃ³n
}
